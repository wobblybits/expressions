const h={path:[468,473],closed:!1,name:"Eye line",description:"Draw a line from left to right that connects the centers of the eyes."},l={path:[98,327],closed:!1,name:"Nose line",description:"Draw a line from left to right that connects the outer edge of each nostril."},f={path:[78,308],closed:!1,name:"Mouth line",description:"Draw a line from left to right that connects the left edge of the mouth to the right edge of the mouth."},m={path:[148,377],closed:!1,name:"Chin line",description:"Draw a line from left to right that represents the bottom of the chin."},d={path:[118,347],closed:!1,name:"Cheekbone line",description:"Draw a line from left to right that connects the tops of the cheekbones."},p={path:[105,334],closed:!1,name:"Brow line",description:"Draw a line from left to right that connects the centers of the eyebrows."},u={path:[83,313],closed:!1,name:"Upper chin",description:"Draw a line from left to right that represents the top of the chin under the lips."},w={path:[37,267],closed:!1,name:"Upper lip",description:"Draw a line from left to right that connects the peaks of the upper lip."},_={path:[10,168],closed:!1,name:"Top symmetry",description:"Draw a line from the top center of the forehead to the bridge of the nose."},g={path:[226,446],closed:!1,name:"Outer corners of eyes",description:"Draw a line from left to right that connects the outer corners of the eyes."},b={path:[173,398],closed:!1,name:"Inner corners of eyes",description:"Draw a line from left to right that connects the inner corners (tear ducts) of the eyes."},P={path:[470,472],closed:!1,name:"Left eye bisect",description:"Draw a line from top to bottom that bisects the left eye."},y={path:[475,477],closed:!1,name:"Right eye bisect",description:"Draw a line from top to bottom that bisects the right eye."},v={path:[67,297],closed:!1,name:"Forehead line",description:"Draw a line from left to right that connects the middle of the forehead above the eyebrows."},D={path:[172,397],closed:!1,name:"Jaw line",description:"Draw a line from left to right that represents the bottom of the jaw at the outside of the face."},k={path:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],closed:!0,name:"Silhouette",description:"Starting at the top of the forehead and going clockwise, outline the face."},A={pupilLine:h,noseLine:l,mouthLine:f,chinLine:m,cheekboneLine:d,browLine:p,upperChin:u,upperLip:w,topBridge:_,outerEyes:g,innerEyes:b,leftEyeBisection:P,rightEyeBisection:y,foreheadLine:v,jawLine:D,silhouette:k};function X(c=0,e=0){const t=[];for(let r=0;r<c;r++){t[r]=[];for(let a=0;a<e;a++)t[r][a]=0}return t}class Y{_sourcePoints;_targetPoints;_forwardParameters;_inverseParameters;constructor(){this._sourcePoints=[],this._targetPoints=[],this._forwardParameters={},this._inverseParameters={}}get sourcePoints(){return this._sourcePoints}get targetPoints(){return this._targetPoints}get forwardParameters(){return this._forwardParameters}set forwardParameters(e){this._forwardParameters=e}get inverseParameters(){return this._inverseParameters}set inverseParameters(e){this._inverseParameters=e}calculate(e,t){this._sourcePoints=e,this._targetPoints=t,this._forwardParameters=this.__calculateParameters(e,t),this._inverseParameters=this.__calculateParameters(t,e)}__calculateParameters(e,t){throw new Error("__calculateParameters must be implemented by subclass")}}class L extends Y{invA;kernelCache;constructor(e,t){super(),this.invA=null,this.kernelCache=new Map,e&&t&&this.calculate(e,t)}forward(e){const t=this.forwardParameters;if(!t)return e;let r=t.Xc[0]+t.Xc[1]*e[0]+t.Xc[2]*e[1],a=t.Yc[0]+t.Yc[1]*e[0]+t.Yc[2]*e[1];for(let o=0;o<t.m;o++){const i=this.__kernelFunction(e[0]-t.sourcePoints[o][0],e[1]-t.sourcePoints[o][1]);r+=t.Xc[o+3]*i,a+=t.Yc[o+3]*i}return[r,a]}inverse(e){const t=this.inverseParameters;if(!t)return e;let r=t.Xc[0]+t.Xc[1]*e[0]+t.Xc[2]*e[1],a=t.Yc[0]+t.Yc[1]*e[0]+t.Yc[2]*e[1];for(let o=0;o<t.m;o++){const i=this.__kernelFunction(e[0]-t.sourcePoints[o][0],e[1]-t.sourcePoints[o][1]);r+=t.Xc[o+3]*i,a+=t.Yc[o+3]*i}return[r,a]}__calculateParameters(e,t){if(e.length!==t.length)return console.warn("Number of points do not match!"),null;const r=e.length;let a=X(r+3,r+3);for(let s=0;s<r;s++){a[0][3+s]=1,a[1][3+s]=e[s][0],a[2][3+s]=e[s][1],a[3+s][0]=1,a[3+s][1]=e[s][0],a[3+s][2]=e[s][1];for(let n=0;n<r;n++)a[3+s][3+n]=this.__kernelFunction(e[s][0]-e[n][0],e[s][1]-e[n][1])}if(this.invA=void 0,!this.invA)return console.warn("Matrix could not be inverted!"),null;const o=new Float64Array(r+3),i=new Float64Array(r+3);for(let s=0;s<r+3;s++){o[s]=0,i[s]=0;for(let n=0;n<r;n++)o[s]+=this.invA[s][3+n]*t[n][0],i[s]+=this.invA[s][3+n]*t[n][1]}return{m:r,Xc:o,Yc:i,sourcePoints:e}}__kernelFunction(e,t){const r=`${e.toFixed(6)},${t.toFixed(6)}`;if(this.kernelCache.has(r))return this.kernelCache.get(r);let a;if(e===0&&t===0)a=0;else{const o=Math.sqrt(e*e+t*t);a=o*o*Math.log(o*o)}return this.kernelCache.set(r,a),a}}export{L as T,A as f,k as s};
