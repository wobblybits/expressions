const c={path:[468,473],closed:!1,name:"Eye line",description:"Draw a line from left to right that connects the centers of the eyes."},l={path:[98,327],closed:!1,name:"Nose line",description:"Draw a line from left to right that connects the outer edge of each nostril."},f={path:[78,308],closed:!1,name:"Mouth line",description:"Draw a line from left to right that connects the left edge of the mouth to the right edge of the mouth."},m={path:[148,377],closed:!1,name:"Chin line",description:"Draw a line from left to right that represents the bottom of the chin."},_={path:[118,347],closed:!1,name:"Cheekbone line",description:"Draw a line from left to right that connects the tops of the cheekbones."},u={path:[105,334],closed:!1,name:"Brow line",description:"Draw a line from left to right that connects the centers of the eyebrows."},d={path:[83,313],closed:!1,name:"Upper chin",description:"Draw a line from left to right that represents the top of the chin under the lips."},p={path:[37,267],closed:!1,name:"Upper lip",description:"Draw a line from left to right that connects the peaks of the upper lip."},w={path:[10,168],closed:!1,name:"Top symmetry",description:"Draw a line from the top center of the forehead to the bridge of the nose."},g={path:[226,446],closed:!1,name:"Outer corners of eyes",description:"Draw a line from left to right that connects the outer corners of the eyes."},P={path:[173,398],closed:!1,name:"Inner corners of eyes",description:"Draw a line from left to right that connects the inner corners (tear ducts) of the eyes."},v={path:[470,472],closed:!1,name:"Left eye bisect",description:"Draw a line from top to bottom that bisects the left eye."},y={path:[475,477],closed:!1,name:"Right eye bisect",description:"Draw a line from top to bottom that bisects the right eye."},b={path:[67,297],closed:!1,name:"Forehead line",description:"Draw a line from left to right that connects the middle of the forehead above the eyebrows."},D={path:[172,397],closed:!1,name:"Jaw line",description:"Draw a line from left to right that represents the bottom of the jaw at the outside of the face."},A={path:[10,338,297,332,284,251,389,356,454,323,361,288,397,365,379,378,400,377,152,148,176,149,150,136,172,58,132,93,234,127,162,21,54,103,67,109],closed:!0,name:"Silhouette",description:"Starting at the top of the forehead and going clockwise, outline the face."},X={pupilLine:c,noseLine:l,mouthLine:f,chinLine:m,cheekboneLine:_,browLine:u,upperChin:d,upperLip:p,topBridge:w,outerEyes:g,innerEyes:P,leftEyeBisection:v,rightEyeBisection:y,foreheadLine:b,jawLine:D,silhouette:A};function k(h=0,e=0){const r=[];for(let t=0;t<h;t++){r[t]=[];for(let n=0;n<e;n++)r[t][n]=0}return r}function E(h){if(h.length!==h[0].length)return;let e=0,r=0,t=0,n=h.length,a=0,o=[],s=[];for(e=0;e<n;e+=1)for(o[o.length]=[],s[s.length]=[],t=0;t<n;t+=1)e==t?o[e][t]=1:o[e][t]=0,s[e][t]=h[e][t];for(e=0;e<n;e+=1){if(a=s[e][e],a==0){for(r=e+1;r<n;r+=1)if(s[r][e]!=0){for(t=0;t<n;t++)a=s[e][t],s[e][t]=s[r][t],s[r][t]=a,a=o[e][t],o[e][t]=o[r][t],o[r][t]=a;break}if(a=s[e][e],a==0)return}for(t=0;t<n;t++)s[e][t]=s[e][t]/a,o[e][t]=o[e][t]/a;for(r=0;r<n;r++)if(r!=e)for(a=s[r][e],t=0;t<n;t++)s[r][t]-=a*s[e][t],o[r][t]-=a*o[e][t]}return o}class L{_sourcePoints;_targetPoints;_forwardParameters;_inverseParameters;constructor(){this._sourcePoints=[],this._targetPoints=[],this._forwardParameters={},this._inverseParameters={}}get sourcePoints(){return this._sourcePoints}get targetPoints(){return this._targetPoints}get forwardParameters(){return this._forwardParameters}set forwardParameters(e){this._forwardParameters=e}get inverseParameters(){return this._inverseParameters}set inverseParameters(e){this._inverseParameters=e}calculate(e,r){this._sourcePoints=e,this._targetPoints=r,this._forwardParameters=this.__calculateParameters(e,r),this._inverseParameters=this.__calculateParameters(r,e)}__calculateParameters(e,r){throw new Error("__calculateParameters must be implemented by subclass")}}class Y extends L{invA;kernelCache;constructor(e,r){super(),this.invA=null,this.kernelCache=new Map,e&&r&&this.calculate(e,r)}forward(e){return this.__isEmpty(this._forwardParameters)?e:this.__transform(e,this._forwardParameters)}inverse(e){return this.__isEmpty(this._inverseParameters)?e:this.__transform(e,this._inverseParameters)}__transform(e,r){let t=r.Xc[0]+r.Xc[1]*e[0]+r.Xc[2]*e[1],n=r.Yc[0]+r.Yc[1]*e[0]+r.Yc[2]*e[1];for(let a=0;a<r.m;a++){const o=this.__kernelFunction(e[0]-r.sourcePoints[a][0],e[1]-r.sourcePoints[a][1]);t+=r.Xc[a+3]*o,n+=r.Yc[a+3]*o}return[t,n]}__calculateParameters(e,r){if(e.length!==r.length)return console.warn("Number of points do not match!"),null;const t=e.length;let n=k(t+3,t+3);for(let s=0;s<t;s++)n[0][3+s]=1,n[1][3+s]=e[s][0],n[2][3+s]=e[s][1],n[3+s][0]=1,n[3+s][1]=e[s][0],n[3+s][2]=e[s][1];for(let s=0;s<t;s++)for(let i=0;i<t;i++)n[s+3][i+3]=this.__kernelFunction(e[s][0]-e[i][0],e[s][1]-e[i][1]),n[i+3][s+3]=n[s+3][i+3];if(this.invA=E(n),this.invA===null)return null;let a=new Float64Array(t+3),o=new Float64Array(t+3);for(let s=0;s<t+3;s++)for(let i=0;i<t;i++)a[s]+=this.invA[s][i+3]*r[i][0],o[s]+=this.invA[s][i+3]*r[i][1];return{m:t,Xc:a,Yc:o,sourcePoints:e}}updateParameters(e){this._targetPoints=e;const r=this.targetPoints.length;let t=new Float64Array(r+3),n=new Float64Array(r+3);for(let a=0;a<r+3;a++)for(let o=0;o<r;o++)t[a]+=this.invA[a][o+3]*e[o][0],n[a]+=this.invA[a][o+3]*e[o][1];return this._forwardParameters.Xc=[...t],this._forwardParameters.Yc=[...n],{Xc:t,Yc:n}}updateInverseParameters(e){this._targetPoints=[...e];const r=this.__calculateParameters(this._targetPoints,this._sourcePoints);return r&&!this.__isEmpty(r)&&(this._inverseParameters=r,this._inverseParameters.Yc[1]=0,this._inverseParameters.Yc[2]=1,this._inverseParameters.Xc[1]=1,this._inverseParameters.Xc[2]=0),this._inverseParameters}__kernelFunction(e,r){if(e==0&&r==0)return 0;const t=e*e+r*r;return t*Math.log(t)}__isEmpty(e){return Object.keys(e).length===0&&e.constructor===Object}}export{Y as T,X as f,A as s};
